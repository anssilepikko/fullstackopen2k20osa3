{"version":3,"sources":["components/Number.js","components/Numbers.js","components/Form.js","components/Filter.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Number","person","handleRemove","className","name","number","id","type","onClick","Numbers","numbers","map","Form","addPerson","newName","handleName","newNumber","handleNumber","onSubmit","value","onChange","Filter","newFilter","Notification","message","baseUrl","request","axios","get","console","log","then","response","data","newObject","post","put","delete","App","props","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","errorMessage","setErrorMessage","useEffect","personService","serverPersons","findPerson","found","find","item","event","preventDefault","personObject","window","confirm","edited","returnedPerson","setTimeout","catch","error","JSON","stringify","concat","virhe","target","filter","toUpperCase","includes","filterOut","ReactDOM","render","document","getElementById"],"mappings":"gMAQeA,EANA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACxB,OACE,qBAAIC,UAAU,OAAd,UAAsBF,EAAOG,KAA7B,MAAsCH,EAAOI,OAA7C,MAAwDJ,EAAOK,GAA/D,MAAqE,wBAAQC,KAAK,SAASJ,UAAU,SAASK,QAAS,kBAAMN,EAAaD,EAAOK,KAA5E,wBCc1DG,EAfC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASR,EAAmB,EAAnBA,aACxB,OACI,mCACKQ,EAAQC,KAAI,SAAAV,GAAM,OACf,cAAC,EAAD,CACAA,OAAQA,EAERC,aAAcA,GAHDD,EAAOK,UCarBM,EAlBF,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,UAAWC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACxD,OACE,8BACE,uBAAMC,SAAUL,EAAhB,UACE,yCACQ,uBAAOM,MAAOL,EAASM,SAAUL,OAEzC,2CACU,uBAAOI,MAAOH,EAAWI,SAAUH,OAE7C,8BACE,wBAAQV,KAAK,SAAb,sCCHKc,EARA,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,UAAWP,EAAiB,EAAjBA,WAC1B,OACM,2CACU,uBAAOI,MAAOG,EAAWF,SAAUL,QCOtCQ,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAe,MAAXA,EACO,KAIP,qBAAKrB,UAAU,QAAf,SACKqB,K,gBCNPC,EAAU,eAkCD,EA9BA,WAEX,IAAMC,EAAWC,IAAMC,IAAIH,GAO3B,OANAI,QAAQC,IAAI,gCAAiCJ,GAMtCA,EAAQK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAqB9B,EAlBA,SAAAC,GAEX,OADgBP,IAAMQ,KAAKV,EAASS,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAgB9B,EAdA,SAAC3B,EAAI4B,GAChB,IAAMR,EAAUC,IAAMS,IAAN,UAAaX,EAAb,YAAwBnB,GAAM4B,GAE9C,OADAL,QAAQC,IAAI,gCAAiCJ,GACtCA,EAAQK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAW9B,EATA,SAAC3B,GACZ,IAAMoB,EAAUC,IAAMU,OAAN,UAAgBZ,EAAhB,YAA2BnB,IAE3C,OADAuB,QAAQC,IAAI,gCAAiCJ,GACtCA,EAAQK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCoL9BK,G,MAzMH,SAACC,GAAU,MAGSC,mBAAS,IAHlB,mBAGdC,EAHc,KAGLC,EAHK,OAKSF,mBAAS,IALlB,mBAKd1B,EALc,KAKL6B,EALK,OAMaH,mBAAS,IANtB,mBAMdxB,EANc,KAMH4B,EANG,OAOaJ,mBAAS,IAPtB,mBAOdlB,EAPc,KAOHuB,EAPG,OAQmBL,mBAAS,MAR5B,mBAQdM,EARc,KAQAC,EARA,KAYrBC,qBAAU,WACRC,IAEGlB,MAAK,SAAAmB,GACJR,EAAWQ,QAEd,IAEH,IAyIMC,EAAa,SAAClD,GAClB4B,QAAQC,IAAIW,GACZZ,QAAQC,IAAI,oBAAqB7B,GAIjC,IAAMmD,EAAQX,EAAQY,MAAK,SAAAC,GAAI,OAAIA,EAAKlD,OAASH,KAEjD,OADA4B,QAAQC,IAAI,SAAUsB,GACfA,GAUT,OACE,gCACE,2CACA,cAAC,EAAD,CAAMvC,UA9JQ,SAAC0C,GAKjB,GAHAA,EAAMC,iBAGU,KAAZ1C,EAAJ,CAGA,IAAM2C,EAAe,CACnBrD,KAAMU,EACNT,OAAQW,GAIV,GAAImC,EAAWrC,GAAf,CAIE,GAFuB4C,OAAOC,QAAP,WAAmB7C,EAAnB,wEAEH,CAElB,IAAMb,EAASwC,EAAQY,MAAK,SAAApD,GAAM,OAAIA,EAAOG,OAASU,KAEhD8C,EAAM,2BAAQ3D,GAAR,IAAgBI,OAAQW,IAE5BV,EAAOL,EAAPK,GAER2C,EACU3C,EAAIsD,GACX7B,MAAK,SAAA8B,GAGJnB,EACED,EAAQ9B,KAAI,SAAAV,GAAM,OAChBA,EAAOK,KAAOA,EAAKuD,EAAiB5D,MAExC8C,EAAgB,WAAD,OAAYc,EAAezD,KAA3B,sBACf0D,YAAW,WACTf,EAAgB,QACf,QAIJgB,OAAM,SAAAC,GAELjB,EAAgB,GAAD,OAAIkB,KAAKC,UAAUF,EAAMhC,SAASC,KAAK+B,SACtDnC,QAAQC,IAAIkC,EAAMhC,SAASC,MAC3B6B,YAAW,WACTf,EAAgB,QACf,QAITlB,QAAQC,IAAI,gCAOdmB,EACUQ,GACP1B,MAAK,SAAA8B,GACJnB,EAAWD,EAAQ0B,OAAON,IAC1Bd,EAAgB,WAAD,OAAYU,EAAarD,KAAzB,aACf0D,YAAW,WACTf,EAAgB,QACf,QAGJgB,OAAM,SAAAC,GAEL,IAAMI,EAAQH,KAAKC,UAAUF,EAAMhC,SAASC,KAAK+B,OACjDjB,EAAgB,GAAD,OAAIqB,IACnBN,YAAW,WACTf,EAAgB,QACf,QAGPlB,QAAQC,IAAI,iCAAkC2B,GAG9Cd,EAAW,IACXC,EAAa,IACbC,EAAa,IACbhB,QAAQC,IAAI,kBA2ER1B,KAAMU,EACNC,WAxEmB,SAACwC,GAGxBZ,EAAWY,EAAMc,OAAOlD,QAsEpBd,OAAQW,EACRC,aAnEqB,SAACsC,GAG1BX,EAAaW,EAAMc,OAAOlD,UAkExB,cAAC,EAAD,CAAcK,QAASsB,IACvB,yCACA,cAAC,EAAD,CACE1C,KAAMkB,EACNP,WAlEqB,SAACwC,GAG1BV,EAAaU,EAAMc,OAAOlD,UAiExB,6BACE,cAAC,EAAD,CACET,QAtBY,KAAdY,EAAyBmB,EACZA,EAAQ6B,QAAO,SAAArE,GAAM,OAAIA,EAAOG,KAAKmE,cAAcC,SAASlD,EAAUiD,kBAsBjFrE,aAhEa,SAACI,GACpBuB,QAAQC,IAAI,8BAA+BxB,GAC3C,IAAML,EAASwC,EAAQY,MAAK,SAAApD,GAAM,OAAIA,EAAOK,KAAOA,KACrCoD,OAAOC,QAAP,kBAA0B1D,EAAOG,KAAjC,uBAEb6C,EAAqB3C,GAAIyB,MAAK,WAC5B,IAAM0C,EAAYhC,EAAQ6B,QAAO,SAAArE,GAAM,OAAIA,EAAOK,KAAOA,KACzDoC,EAAW+B,GACX5C,QAAQC,IAAR,kBAAwB7B,EAAOG,KAA/B,6BACA2C,EAAgB,WAAD,OAAY9C,EAAOG,KAAnB,6BACf0D,YAAW,WACTf,EAAgB,QACf,QAGFgB,OAAM,SAAAC,GAELjB,EAAgB,GAAD,OAAIkB,KAAKC,UAAUF,EAAMhC,SAASC,KAAK+B,SACtDF,YAAW,WACTf,EAAgB,QACf,kBC1Jb2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f24b1c7a.chunk.js","sourcesContent":["import React from 'react'\n\nconst Number = ({ person, handleRemove }) => {\n  return (\n    <li className='note'>{person.name} / {person.number} / {person.id} / <button type='button' className='button' onClick={() => handleRemove(person.id)}>Remove</button></li>\n  )\n}\n\nexport default Number","import React from 'react'\nimport Number from './Number.js'\n\nconst Numbers = ({ numbers, handleRemove }) => {\n    return (\n        <>\n            {numbers.map(person =>\n                <Number key={person.id}\n                person={person}\n                // Remove-nappi\n                handleRemove={handleRemove}\n                />\n            )}\n\n        </>\n    )\n}\n\nexport default Numbers","import React from 'react'\n\nconst Form = ({addPerson, newName, handleName, newNumber, handleNumber }) => {\n  return (\n    <div>\n      <form onSubmit={addPerson}>\n        <div>\n          Name: <input value={newName} onChange={handleName} />\n        </div>\n        <div>\n          Number: <input value={newNumber} onChange={handleNumber} />\n        </div>\n        <div>\n          <button type=\"submit\">Add a new person</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default Form\n\n\n\n\n","import React from 'react'\n\nconst Filter = ({newFilter, handleName }) => {\n  return (\n        <div>\n          Filter: <input value={newFilter} onChange={handleName} />\n        </div>\n  )\n}\n\nexport default Filter\n\n\n\n","const Notification = ({ message }) => {\n    if (message == null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n// Hakee tiedot serveriltä ja palauttaa reponsen\n// data-kentän, jossa tiedot ovat taulukkomuodossa\nconst getAll = () => {\n    // Axios palauttaa promisen\n    const request =  axios.get(baseUrl)\n    console.log('persons.js / getAll / request', request)\n    // Koska then:in parametri palauttaa suoraan arvon\n    // response.data, on funktion getAll palauttama\n    // promise sellainen, että jos HTTP-kutsu onnistuu,\n    // antaa promise takaisinkutsulleen HTTP-pyynnön\n    // mukana olleen datan\n    return request.then(response => response.data)\n\n}\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    console.log('persons.js / update / request', request)\n    return request.then(response => response.data)\n}\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    console.log('persons.js / remove / request', request)\n    return request.then(response => response.data)\n}\n\n// Koska olion kenttien nimet ovat samat kuin\n// niiden arvon määrittelevien muuttujien nimet,\n// voidaan olion määrittely kirjoittaa tiivimmässä muodossa:\nexport default { getAll, create, update, remove }","import React, { useEffect, useState } from 'react'\nimport Numbers from './components/Numbers.js'\nimport Form from './components/Form.js'\nimport Filter from './components/Filter.js'\nimport Notification from './components/Notification.js'\nimport personService from './services/persons.js'\nimport './index.css'\n\nconst App = (props) => {\n  // Tilojen määritys\n  // Määritetään persons sisältämään tyhjän listan\n  const [persons, setPersons] = useState([])\n  // Tilamuuttujat inputeille\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // Haetaan henkilöt serveriltä ja asetetaan\n  // ne tilamuuttujaan\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(serverPersons => {\n        setPersons(serverPersons)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    // Estetään sivun latautuminen\n    event.preventDefault()\n\n    // Palataan, jos nimeä ei ole annettu\n    if (newName === '') return\n\n    // Henkilö-objekti, jossa nimi ja numero\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    // Tarkistetaan löytyykö nimi jo luettelosta\n    if (findPerson(newName)) {\n      // Ilmoitusikkuna, jos löytyy\n      const confirmReplace = window.confirm(`'${newName}' is already added to phonebook. Replace the number with a new one?`)\n\n      if (confirmReplace) {\n        // Etsitään nimeä vastaava henkilö\n        const person = persons.find(person => person.name === newName)\n        // Kopioidaan person ja muutetaan kopion number-kenttää\n        const edited = { ...person, number: newNumber }\n        // const id = person.id\n        const { id } = person\n\n        personService\n          .update(id, edited)\n          .then(returnedPerson => {\n            // Päivitetään tilan henkilö\n            // Mapataan pois vanha henkilö ja asetetaan uudet tilalle\n            setPersons(\n              persons.map(person =>\n                person.id === id ? returnedPerson : person)\n            )\n            setErrorMessage(`Person '${returnedPerson.name}' number changed!`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          }\n          )\n          // Virheenkäsittely, jos promise feilaa\n          .catch(error => {\n            //setErrorMessage(`Error! '${edited.name}' was not edited! Probably removed from server...`)\n            setErrorMessage(`${JSON.stringify(error.response.data.error)}`)\n            console.log(error.response.data)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n      }\n      // Palataan takaisin, jos numeroa ei vaihdeta\n      console.log('Number update cancelled')\n      return\n    }\n\n    // Lähetetään henkilön tiedot oliona serverille\n    // Vastaanotetaan serveriltä saatu vastaus,\n    // jossa tiedot ja lisätään ne ohjelman tilaan\n    personService\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setErrorMessage(`Person '${personObject.name}' added!`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n      // Virheenkäsittely, jos promise feilaa\n      .catch(error => {\n        //setErrorMessage(`Error! '${personObject.name}' was not added!`)\n        const virhe = JSON.stringify(error.response.data.error)\n        setErrorMessage(`${virhe}`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n\n    console.log('New person added to phonebook:', personObject)\n\n    // Input-kenttien nollaus\n    setNewName('')\n    setNewNumber('')\n    setNewFilter('')\n    console.log('Fields reset')\n  }\n\n  // Mitä tapahtuu, kun nimikentässä havaitaan tapahtuma\n  const handleNameChange = (event) => {\n    //console.log(event.target.value)\n    // Printataan tapahtuman arvo eli kirjain kenttään\n    setNewName(event.target.value)\n  }\n\n  // Mitä tapahtuu, kun numerokentässä havaitaan tapahtuma\n  const handleNumberChange = (event) => {\n    //console.log(event.target.value)\n    // Printataan tapahtuman arvo eli numero kenttään\n    setNewNumber(event.target.value)\n  }\n\n  // Mitä tapahtuu, kun filtterikentässä havaitaan tapahtuma\n  const handleFilterChange = (event) => {\n    //console.log(event.target.value)\n    // Printataan tapahtuman arvo eli kirjain kenttään\n    setNewFilter(event.target.value)\n  }\n\n  // Poistonapin toiminnallisuudet\n  const handleRemove = (id) => {\n    console.log('app.js / handleRemove / id:', id)\n    const person = persons.find(person => person.id === id)\n    const remove = window.confirm(`Remove '${person.name}' from phonebook?`)\n    if (remove) {\n      personService.remove(id).then(() => {\n        const filterOut = persons.filter(person => person.id !== id)\n        setPersons(filterOut)\n        console.log((`Person '${person.name}' removed from phonebook`))\n        setErrorMessage(`Person '${person.name}' removed from phonebook`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n      // Virheenkäsittely, jos promise feilaa\n        .catch(error => {\n          //setErrorMessage(`Error! '${person.name}' was not removed!`)\n          setErrorMessage(`${JSON.stringify(error.response.data.error)}`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n\n    }\n\n  }\n\n  // Nimien etsintä, joka palauttaa totuusarvon\n  const findPerson = (person) => {\n    console.log(persons)\n    console.log('FindPerson input:', person)\n    // Käydään nimet läpi\n    // Palautetaan true, jos löytyy\n    // Palautetaan false, jos ei löydy\n    const found = persons.find(item => item.name === person)\n    console.log('Found:', found)\n    return found\n  }\n\n  // Etsitään hakuehtoa vastaavat nimet ja palautetaan ne\n  const filterNumbers = () => {\n    if (newFilter === '') return persons\n    const filtered = persons.filter(person => person.name.toUpperCase().includes(newFilter.toUpperCase()))\n    return filtered\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Form addPerson={addPerson}\n        name={newName}\n        handleName={handleNameChange}\n        number={newNumber}\n        handleNumber={handleNumberChange}\n      />\n      <Notification message={errorMessage} />\n      <h2>Numbers</h2>\n      <Filter\n        name={newFilter}\n        handleName={handleFilterChange}\n      />\n      <ul>\n        <Numbers\n          numbers={filterNumbers()}\n          handleRemove={handleRemove}\n        />\n      </ul>\n    </div>\n  )\n\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}